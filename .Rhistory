library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
# Split rocket league data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary - p value less than 0.05
summary(log_model)
predictions <- predict(log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
test_results <- test_data %>%
mutate(predicted = predicted_class)
accuracy(test_results, truth = factor(match_win), estimate = factor(predicted))
install.packages("yardstick")
install.packages("yardstick")
accuracy(test_results, truth = factor(match_win), estimate = factor(predicted))
accuracy(test_results, truth = match_win, estimate = predicted)
install.packages("yardstick")
?yardstick
??yardstick
?accuracy
??accuracy
accuracy_vec(test_results, truth = match_win, estimate = predicted)
test_results <- test_data %>%
mutate(predicted = predicted_class) %>%
accuracy_vec(test_results, truth = match_win, estimate = predicted) %>%
roc_auc(test_results, truth = factor(match_win), .pred = predictions)
accuracy(team_stats)
test_results <- test_data %>%
mutate(predicted = predicted_class)
View(test_results)
accuracy(test_results, truth = factor(match_win), estimate = factor(predicted))
test_results <- test_data %>%
mutate(predicted = predicted_class)
accuracy(test_results, truth = factor(match_win), estimate = factor(predicted))
View(test_results)
test_results <- test_data %>%
mutate(predicted = predicted_class)
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
test_results <- test_data %>%
mutate(predicted = predicted_class,
match_win = factor(match_win))  # Convert match_win to factor
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),
match_win = factor(match_win))  # Convert match_win to factor
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
print(accuracy_score)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url)
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url)
r6 <- r6 %>%
rename_all(tolower)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url) # construct data frame
r6 <- r6 %>%
rename_all(tolower) # make all column names lowercase
# Make new columns indicating if team a won the match and if they had more early round wins
r6_data <- r6 %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(early_rounds_won_a > early_rounds_won_b, 1, 0))
train_index <- createDataPartition(r6_data$match_win, p = 0.8, list = FALSE)
train_data <- r6_data[train_index, ]
test_data <- r6_data[-train_index, ]
# Fit the logistic regression model
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary - p value less than 0.05
summary(log_model)
predictions <- predict(log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
# Added model performance metrics with yardstick
# Convert estimate and truth to factor
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),
match_win = factor(match_win))  # Convert match_win to factor
# Calculate accuracy based on actual results and predictions
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
# Print accuracy score
print(accuracy_score)
roc_auc(test_results, truth = factor(match_win), .pred = predictions)
roc_auc(test_results, truth = factor(match_win), .pred = predictions)
View(test_results)
roc_auc(test_results, truth = match_win, .pred = predictions)
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),  # Convert predicted_class to factor
match_win = factor(match_win),        # Convert match_win to factor
predictions = predict(log_model, newdata = test_data, type = "response"))  # Add predicted probabilities
# Print accuracy score
print(accuracy_score)
roc_auc(test_results, truth = match_win, .pred = predictions)
tidy(log_model, exponentiate = TRUE, conf.int = TRUE)
r6_data %>%
ggplot(aes(x = factor(early_win_indicator), fill = factor(match_win))) +
geom_bar(position = "fill") +
labs(x = "Early Win (1 = Yes)", y = "Proportion", fill = "Match Win") +
theme_minimal()
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary - p value less than 0.05
summary(log_model)
predictions <- predict(log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),
match_win = factor(match_win))  # Convert match_win to factor
# Calculate accuracy based on actual results and predictions
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
# Print accuracy score
print(accuracy_score)
# Calculate odds ratio for rocket league
tidy(log_model, exponentiate = TRUE, conf.int = TRUE)
rocket_data %>%
ggplot(aes(x = factor(early_win_indicator), fill = factor(match_win))) +
geom_bar(position = "fill") +
labs(x = "Early Win (1 = Yes)", y = "Proportion", fill = "Match Win")
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readr)
set.seed(1999)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url) # construct data frame
r6 <- r6 %>%
rename_all(tolower) # make all column names lowercase
team_stats <- r6 %>%
pivot_longer(cols = c(team_a, team_b), names_to = "role", values_to = "team") %>%
mutate(win = ifelse(team == winner, 1, 0)) %>%
group_by(team) %>%
summarize(matches_played = n(), wins = sum(win), win_rate = wins / matches_played)
# Bar plot win rates for each team
ggplot(team_stats, aes(x = reorder(team, win_rate), y = win_rate, fill = team)) +
geom_col() +
coord_flip() +
labs(title = "Win Rates by Team",
x = "Team",
y = "Win Rate")
map_counts <- r6 %>%
count(map, name = "times_played")
# Plots map counts
ggplot(map_counts, aes(x = reorder(map, times_played), y = times_played, fill = map)) +
geom_col() +
coord_flip() +
labs(title = "Number of Matches Played per Map",
x = "Map",
y = "Times Played") +
theme(legend.position = "none")
win_rate_data <- r6 %>%
mutate(team_a_won = ifelse(winner == team_a, 1, 0),
team_b_won = ifelse(winner == team_b, 1, 0)) %>%
group_by(early_rounds_won_a, early_rounds_won_b) %>%
summarise(win_rate_a = mean(team_a_won),
win_rate_b = mean(team_b_won),
match_count = n(),
.groups = "drop") %>%
pivot_longer(cols = c(win_rate_a, win_rate_b),
names_to = "team",
values_to = "win_rate") %>%
mutate(team = ifelse(team == "win_rate_a", "Team A", "Team B"))
# Bar plot comparing win rates by team based on the number of early rounds won
ggplot(win_rate_data, aes(x = factor(ifelse(team == "Team A", early_rounds_won_a, early_rounds_won_b)),
y = win_rate, fill = team)) +
geom_col(position = "dodge", color = "black") +
labs(title = "Win Rate Based on Early Rounds Won",
x = "Early Rounds Won",
y = "Win Rate",
fill = "Team")
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
# data load + clean -------------------------------------------------------
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# wrangling ---------------------------------------------------------------
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
# train + test split ------------------------------------------------------
# Split rocket league data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
# model -------------------------------------------------------------------
# Fit the logistic regression model
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary - p value less than 0.05
summary(log_model)
# predictions + evaluation -------------------------------------------------------------
# Generate predictions using the logistic regression model on the test data
predictions <- predict(log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
# Added model performance metrics with yardstick
# Convert estimate and truth to factor
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),
match_win = factor(match_win))  # Convert match_win to factor
# Calculate accuracy based on actual results and predictions
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
# Print accuracy score
print(accuracy_score)
# Calculate odds ratio for rocket league
tidy(log_model, exponentiate = TRUE, conf.int = TRUE)
# visualization -----------------------------------------------------------
# Plot distribution of win rates based on early win indicator
rocket_data %>%
ggplot(aes(x = factor(early_win_indicator), fill = factor(match_win))) +
geom_bar(position = "fill") +
labs(x = "Early Win (1 = Yes)", y = "Proportion", fill = "Match Win")
library(tidyverse)
library(brms)  # For Bayesian modeling
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
r6_gid <- "716521061"   # Rainbow Six
rl_gid <- "0"           # Rocket League
# Rainbow Six
url_r6 <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id,
"/export?format=csv&gid=", r6_gid)
r6 <- read_csv(url_r6) %>%
rename_all(tolower) %>%
mutate(game = "Rainbow Six")
# Rocket League
url_rl <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id,
"/export?format=csv&gid=", rl_gid)
rl <- read_csv(url_rl) %>%
rename_all(tolower) %>%
mutate(game = "Rocket League")
# Combine datasets
all_matches <- bind_rows(r6, rl)
View(all_matches)
all_matches <- all_matches %>%
mutate(
team1 = pmin(team_a, team_b),
team2 = pmax(team_a, team_b),
series_id = paste(tournament, team1, team2, sep = "_"),
match_order = ave(match_id, series_id, FUN = seq_along),
winner_norm = case_when(
winner == team1 ~ "Team1",
winner == team2 ~ "Team2",
TRUE ~ "Unknown"
)
)
library(tidyverse)
library(caret)
library(ggplot2)
library(brms)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
Capstone_Data <- read_csv(url)
# Ensure column names are lowercase
Capstone_Data <- Capstone_Data %>%
rename_all(tolower)
View(Capstone_Data)
df_long <- Capstone_Data %>%
pivot_longer(cols = c(team_a, team_b), names_to = "role", values_to = "team") %>%
mutate(
win = ifelse(team == winner, 1, 0),
first_goal = ifelse(
(role == "team_a" & early_rounds_won_a == 1) |
(role == "team_b" & early_rounds_won_b == 1), 1, 0)
) %>%
select(team, win, first_goal)
# Ensure 'team' is a factor for random effects
df_long$team <- as.factor(df_long$team)
View(df_long)
View(df_long)
View(df_long)
# Construct longer dataframe to track whether or not each team won and/or had more early wins
df_long <- Capstone_Data %>%
pivot_longer(cols = c(team_a, team_b), names_to = "role", values_to = "team") %>%
mutate(
win = ifelse(team == winner, 1, 0),
early_wins = ifelse(
(role == "team_a" & early_rounds_won_a == 1) |
(role == "team_b" & early_rounds_won_b == 1), 1, 0)
) %>%
select(team, win, first_goal)
# Construct longer dataframe to track whether or not each team won and/or had more early wins
df_long <- Capstone_Data %>%
pivot_longer(cols = c(team_a, team_b), names_to = "role", values_to = "team") %>%
mutate(
win = ifelse(team == winner, 1, 0),
early_wins = ifelse(
(role == "team_a" & early_rounds_won_a == 1) |
(role == "team_b" & early_rounds_won_b == 1), 1, 0)
) %>%
select(team, win, early_wins)
View(df_long)
df_long <- Capstone_Data %>%
pivot_longer(cols = c(team_a, team_b), names_to = "role", values_to = "team") %>%
mutate(
win = ifelse(team == winner, 1, 0),
early_wins = ifelse(
(role == "team_a" & early_rounds_won_a == 1) |
(role == "team_b" & early_rounds_won_b == 1), 1, 0)
) %>%
select(team, win, early_wins)
# Ensure 'team' is a factor for random effects
df_long$team <- as.factor(df_long$team)
# Fits a bayesian logistic regression model predicting the probability of a win based on
# whether a team scored the first goal, with a random effect for team strength, using
# the brm function
bayes_model_r6 <- brm(
win ~ first_goal + (1 | team),  # Random effect for team strength
data = df_long,
family = bernoulli(),
prior = c(set_prior("normal(0, 1)", class = "b")),  # Weakly informative prior
chains = 4, iter = 2000, warmup = 500, cores = 4
)
install.packages("brms")
library(brms)
# Fits a bayesian logistic regression model predicting the probability of a win based on
# whether a team scored the first goal, with a random effect for team strength, using
# the brm function
bayes_model_r6 <- brm(
win ~ first_goal + (1 | team),  # Random effect for team strength
data = df_long,
family = bernoulli(),
prior = c(set_prior("normal(0, 1)", class = "b")),  # Weakly informative prior
chains = 4, iter = 2000, warmup = 500, cores = 4
)
# Fits a bayesian logistic regression model predicting the probability of a win based on
# whether a team scored the first goal, with a random effect for team strength, using
# the brm function
bayes_model_r6 <- brm(
win ~ first_goal + (1 | team),  # Random effect for team strength
data = df_long,
family = bernoulli(),
prior = c(set_prior("normal(0, 1)", class = "b")),  # Weakly informative prior
chains = 4, iter = 2000, warmup = 500, cores = 4
)
# Fits a bayesian logistic regression model predicting the probability of a win based on
# whether a team scored the first goal, with a random effect for team strength, using
# the brm function
bayes_model_r6 <- brm(
win ~ early_wins + (1 | team),  # Random effect for team strength
data = df_long,
family = bernoulli(),
prior = c(set_prior("normal(0, 1)", class = "b")),  # Weakly informative prior
chains = 4, iter = 2000, warmup = 500, cores = 4
)
library(tidyverse)
library(caret)
library(ggplot2)
library(brms)
library(readr)
library(bayestestR)  # Added for probability of direction analysis
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
Capstone_Data <- read_csv(url) # construct data frame
# Ensure column names are lowercase
Capstone_Data <- Capstone_Data %>%
rename_all(tolower)
df_long <- Capstone_Data %>%
pivot_longer(cols = c(team_a, team_b), names_to = "role", values_to = "team") %>%
mutate(
win = ifelse(team == winner, 1, 0),
early_wins = ifelse(
(role == "team_a" & early_rounds_won_a == 1) |
(role == "team_b" & early_rounds_won_b == 1), 1, 0)
) %>%
select(team, win, early_wins)
# Ensure 'team' is a factor for random effects
df_long$team <- as.factor(df_long$team)
# Fits a bayesian logistic regression model predicting the probability of a win based on
# whether a team scored the first goal, with a random effect for team strength, using
# the brm function
bayes_model_r6 <- brm(
win ~ early_wins + (1 | team),  # Random effect for team strength
data = df_long,
family = bernoulli(),
prior = c(set_prior("normal(0, 1)", class = "b")),  # Weakly informative prior
chains = 4, iter = 2000, warmup = 500, cores = 4
)
library(tidyverse)
library(caret)
library(ggplot2)
library(brms)
library(readr)
library(bayestestR)  # Added for probability of direction analysis
library(bayesplot)    # Added for posterior predictive checks
set.seed(1999)       #
library(tidyverse)
library(caret)
library(ggplot2)
library(brms)
library(readr)
library(bayestestR)  # Added for probability of direction analysis
library(bayesplot)    # Added for posterior predictive checks
set.seed(1999)       #
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
Capstone_Data <- read_csv(url) # construct data frame
# Ensure column names are lowercase
Capstone_Data <- Capstone_Data %>%
rename_all(tolower)
df_long <- Capstone_Data %>%
pivot_longer(cols = c(team_a, team_b), names_to = "role", values_to = "team") %>%
mutate(
win = ifelse(team == winner, 1, 0),
early_wins = ifelse(
(role == "team_a" & early_rounds_won_a == 1) |
(role == "team_b" & early_rounds_won_b == 1), 1, 0)
) %>%
select(team, win, early_wins)
# Ensure 'team' is a factor for random effects
df_long$team <- as.factor(df_long$team)
# Fits a bayesian logistic regression model predicting the probability of a win based on
# whether a team scored the first goal, with a random effect for team strength, using
# the brm function
bayes_model_r6 <- brm(
win ~ early_wins + (1 | team),  # Random effect for team strength
data = df_long,
family = bernoulli(),
prior = c(set_prior("normal(0, 1)", class = "b")),  # Weakly informative prior
chains = 4, iter = 2000, warmup = 500, cores = 4
)
View(bayes_model_r6)
summary(bayes_model_r6)   # View estimates
# view estimates
summary(bayes_model_r6)
# visualize model's coefficients and check fit
plot(bayes_model_r6)
View(df_long)
