team_b_won = ifelse(winner == team_b, 1, 0)) %>%
group_by(map) %>%
summarise(win_rate_a = mean(team_a_won),
win_rate_b = mean(team_b_won),
match_count = n(),
.groups = "drop") %>%
pivot_longer(cols = c(win_rate_a, win_rate_b),
names_to = "team",
values_to = "win_rate")
win_rate_by_map <- win_rate_by_map %>%
mutate(map = reorder(map, match_count))
# Plot bar chart
ggplot(win_rate_by_map, aes(x = map, y = win_rate, fill = team)) +
geom_col(position = "dodge", color = "black") +
scale_fill_manual(values = c("pink", "lightblue")) +
coord_flip() +
labs(title = "Win Rate by Map for Both Teams (Ordered by Match Count)",
x = "Map",
y = "Win Rate",
fill = "Team")
ggplot(team_stats, aes(x = reorder(team, win_rate), y = win_rate, fill = team)) +
geom_col() +
coord_flip() +
labs(title = "Win Rates by Team",
x = "Team",
y = "Win Rate")
ggplot(win_rate_data, aes(x = factor(ifelse(team == "Team A", early_rounds_won_a, early_rounds_won_b)),
y = win_rate, fill = team)) +
geom_col(position = "dodge", color = "black") +
labs(title = "Win Rate Based on Early Rounds Won",
x = "Early Rounds Won",
y = "Win Rate",
fill = "Team")
win_rate_by_map <- r6 %>%
mutate(team_a_won = ifelse(winner == team_a, 1, 0),
team_b_won = ifelse(winner == team_b, 1, 0)) %>%
group_by(map) %>%
summarise(win_rate_a = mean(team_a_won),
win_rate_b = mean(team_b_won),
match_count = n(),
.groups = "drop") %>%
pivot_longer(cols = c(win_rate_a, win_rate_b),
names_to = "team",
values_to = "win_rate")
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
set.seed(1999)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url)
r6 <- r6 %>%
rename_all(tolower)
team_stats <- r6 %>%
pivot_longer(cols = c(team_a, team_b), names_to = "role", values_to = "team") %>%
mutate(win = ifelse(team == winner, 1, 0)) %>%
group_by(team) %>%
summarize(matches_played = n(), wins = sum(win), win_rate = wins / matches_played)
ggplot(team_stats, aes(x = reorder(team, win_rate), y = win_rate, fill = team)) +
geom_col() +
coord_flip() +
labs(title = "Win Rates by Team",
x = "Team",
y = "Win Rate")
map_counts <- r6 %>%
count(map, name = "times_played")
ggplot(map_counts, aes(x = reorder(map, times_played), y = times_played, fill = map)) +
geom_col() +
coord_flip() +
labs(title = "Number of Matches Played per Map",
x = "Map",
y = "Times Played") +
theme(legend.position = "none")
win_rate_data <- r6 %>%
mutate(team_a_won = ifelse(winner == team_a, 1, 0),
team_b_won = ifelse(winner == team_b, 1, 0)) %>%
group_by(early_rounds_won_a, early_rounds_won_b) %>%
summarise(win_rate_a = mean(team_a_won),
win_rate_b = mean(team_b_won),
match_count = n(),
.groups = "drop") %>%
pivot_longer(cols = c(win_rate_a, win_rate_b),
names_to = "team",
values_to = "win_rate") %>%
mutate(team = ifelse(team == "win_rate_a", "Team A", "Team B"))
ggplot(win_rate_data, aes(x = factor(ifelse(team == "Team A", early_rounds_won_a, early_rounds_won_b)),
y = win_rate, fill = team)) +
geom_col(position = "dodge", color = "black") +
labs(title = "Win Rate Based on Early Rounds Won",
x = "Early Rounds Won",
y = "Win Rate",
fill = "Team")
win_rate_by_map <- r6 %>%
mutate(team_a_won = ifelse(winner == team_a, 1, 0),
team_b_won = ifelse(winner == team_b, 1, 0)) %>%
group_by(map) %>%
summarise(win_rate_a = mean(team_a_won),
win_rate_b = mean(team_b_won),
match_count = n(),
.groups = "drop") %>%
pivot_longer(cols = c(win_rate_a, win_rate_b),
names_to = "team",
values_to = "win_rate")
win_rate_by_map <- win_rate_by_map %>%
mutate(map = reorder(map, match_count))
# Plot bar chart
ggplot(win_rate_by_map, aes(x = map, y = win_rate, fill = team)) +
geom_col(position = "dodge", color = "black") +
scale_fill_manual(values = c("pink", "lightblue")) +
coord_flip() +
labs(title = "Win Rate by Map for Both Teams (Ordered by Match Count)",
x = "Map",
y = "Win Rate",
fill = "Team")
source("~/University of Arizona/Spring 2025/ISTA 498/esports_analysis/exploratory_visuals_r6.R")
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
set.seed(1999)
# data load + clean --------------------------------------------------------------
# Constructs the URL for the Google sheet that contains the R6 data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url) # construct data frame
r6 <- r6 %>%
rename_all(tolower) # make all column names lowercase
unique(c(r6$team_a, r6$team_b))
team_stats <- r6 %>%
pivot_longer(cols = c(team_a, team_b), names_to = "role", values_to = "team") %>%
mutate(win = ifelse(team == winner, 1, 0)) %>%
group_by(team) %>%
summarize(matches_played = n(), wins = sum(win), win_rate = wins / matches_played)
View(team_stats)
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
# Create dataframe that calculates each team's matches played, wins, and win rates
team_stats <- r6 %>%
pivot_longer(cols = c(team_a, team_b), names_to = "role", values_to = "team") %>%
mutate(win = ifelse(team == winner, 1, 0)) %>%
group_by(team) %>%
summarize(matches_played = n(), wins = sum(win), win_rate = wins / matches_played)
# Bar plot win rates for each team
ggplot(team_stats, aes(x = reorder(team, win_rate), y = win_rate, fill = team)) +
geom_col() +
coord_flip() +
labs(title = "Win Rates by Team",
x = "Team",
y = "Win Rate")
# Counts number of times each map was played across the collected tournament data
map_counts <- r6 %>%
count(map, name = "times_played")
View(map_counts)
# Plots map counts
ggplot(map_counts, aes(x = reorder(map, times_played), y = times_played, fill = map)) +
geom_col() +
coord_flip() +
labs(title = "Number of Matches Played per Map",
x = "Map",
y = "Times Played") +
theme(legend.position = "none")
# Calculates win rates for team a + b based on early rounds won
win_rate_data <- r6 %>%
mutate(team_a_won = ifelse(winner == team_a, 1, 0),
team_b_won = ifelse(winner == team_b, 1, 0)) %>%
group_by(early_rounds_won_a, early_rounds_won_b) %>%
summarise(win_rate_a = mean(team_a_won),
win_rate_b = mean(team_b_won),
match_count = n(),
.groups = "drop") %>%
pivot_longer(cols = c(win_rate_a, win_rate_b),
names_to = "team",
values_to = "win_rate") %>%
mutate(team = ifelse(team == "win_rate_a", "Team A", "Team B"))
View(win_rate_data)
# Bar plot
ggplot(win_rate_data, aes(x = factor(ifelse(team == "Team A", early_rounds_won_a, early_rounds_won_b)),
y = win_rate, fill = team)) +
geom_col(position = "dodge", color = "black") +
labs(title = "Win Rate Based on Early Rounds Won",
x = "Early Rounds Won",
y = "Win Rate",
fill = "Team")
# Win rate by map for both teams
win_rate_by_map <- r6 %>%
mutate(team_a_won = ifelse(winner == team_a, 1, 0),
team_b_won = ifelse(winner == team_b, 1, 0)) %>%
group_by(map) %>%
summarise(win_rate_a = mean(team_a_won),
win_rate_b = mean(team_b_won),
match_count = n(),
.groups = "drop") %>%
pivot_longer(cols = c(win_rate_a, win_rate_b),
names_to = "team",
values_to = "win_rate")
win_rate_by_map <- win_rate_by_map %>%
mutate(map = reorder(map, match_count))
# Plot bar chart
ggplot(win_rate_by_map, aes(x = map, y = win_rate, fill = team)) +
geom_col(position = "dodge", color = "black") +
scale_fill_manual(values = c("pink", "lightblue")) +
coord_flip() +
labs(title = "Win Rate by Map for Both Teams (Ordered by Match Count)",
x = "Map",
y = "Win Rate",
fill = "Team")
# Win rate by map for Team A
win_rate_by_map_a <- r6 %>%
mutate(team_a_won = ifelse(winner == team_a, 1, 0)) %>%
group_by(map) %>%
summarise(win_rate_a = mean(team_a_won), match_count = n(), .groups = "drop") %>%
mutate(map = reorder(map, match_count)) # Order by match count
# Plot bar chart for Team A
ggplot(win_rate_by_map_a, aes(x = map, y = win_rate_a, fill = "Team A")) +
geom_col(color = "black") +
scale_fill_manual(values = c("pink")) +
coord_flip() +
labs(title = "Win Rate by Map for Team A (Ordered by Match Count)",
x = "Map",
y = "Win Rate",
fill = "Team") +
theme(legend.position = "none") # Remove legend since it's only Team A
# Win rate by map for Team A
win_rate_by_map_a <- r6 %>%
mutate(team_a_won = ifelse(winner == team_a, 1, 0)) %>%
group_by(map) %>%
summarise(win_rate_a = mean(team_a_won), match_count = n(), .groups = "drop")
# Plot bar chart for Team A
ggplot(win_rate_by_map_a, aes(x = map, y = win_rate_a, fill = "Team A")) +
geom_col(color = "black") +
scale_fill_manual(values = c("pink")) +
coord_flip() +
labs(title = "Win Rate by Map for Team A (Ordered by Match Count)",
x = "Map",
y = "Win Rate",
fill = "Team") +
theme(legend.position = "none") # Remove legend since it's only Team A
library(tidyverse)
library(dplyr)
library(ggplot2)
library(readr)
set.seed(1999)
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
set.seed(1999)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
View(rocket_league)
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
View(rocket_data)
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
View(train_data)
# Fit the logistic regression model
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary
summary(log_model)
# Rachel Stienstra
# ISTA 498 Senior Capstone
# April 3, 2025
options(scipen=999)
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
set.seed(1999)
options(scipen=999)
# Fit the logistic regression model
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary
summary(log_model)
predictions <- predict(log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
test_results <- test_data %>%
mutate(predicted = predicted_class)
View(test_results)
accuracy(test_results, truth = factor(match_win), estimate = factor(predicted))
roc_auc(test_results, truth = factor(match_win), .pred = predictions)
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
test_results <- test_data %>%
mutate(predicted = predicted_class)
accuracy(test_results, truth = factor(match_win), estimate = factor(predicted))
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
test_results <- test_data %>%
mutate(predicted = predicted_class)
accuracy(test_results, truth = factor(match_win), estimate = factor(predicted))
install.packages("yardstick")
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
# Split rocket league data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary - p value less than 0.05
summary(log_model)
predictions <- predict(log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
test_results <- test_data %>%
mutate(predicted = predicted_class)
accuracy(test_results, truth = factor(match_win), estimate = factor(predicted))
install.packages("yardstick")
install.packages("yardstick")
accuracy(test_results, truth = factor(match_win), estimate = factor(predicted))
accuracy(test_results, truth = match_win, estimate = predicted)
install.packages("yardstick")
?yardstick
??yardstick
?accuracy
??accuracy
accuracy_vec(test_results, truth = match_win, estimate = predicted)
test_results <- test_data %>%
mutate(predicted = predicted_class) %>%
accuracy_vec(test_results, truth = match_win, estimate = predicted) %>%
roc_auc(test_results, truth = factor(match_win), .pred = predictions)
accuracy(team_stats)
test_results <- test_data %>%
mutate(predicted = predicted_class)
View(test_results)
accuracy(test_results, truth = factor(match_win), estimate = factor(predicted))
test_results <- test_data %>%
mutate(predicted = predicted_class)
accuracy(test_results, truth = factor(match_win), estimate = factor(predicted))
View(test_results)
test_results <- test_data %>%
mutate(predicted = predicted_class)
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
test_results <- test_data %>%
mutate(predicted = predicted_class,
match_win = factor(match_win))  # Convert match_win to factor
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),
match_win = factor(match_win))  # Convert match_win to factor
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
print(accuracy_score)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url)
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url)
r6 <- r6 %>%
rename_all(tolower)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url) # construct data frame
r6 <- r6 %>%
rename_all(tolower) # make all column names lowercase
# Make new columns indicating if team a won the match and if they had more early round wins
r6_data <- r6 %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(early_rounds_won_a > early_rounds_won_b, 1, 0))
train_index <- createDataPartition(r6_data$match_win, p = 0.8, list = FALSE)
train_data <- r6_data[train_index, ]
test_data <- r6_data[-train_index, ]
# Fit the logistic regression model
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary - p value less than 0.05
summary(log_model)
predictions <- predict(log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
# Added model performance metrics with yardstick
# Convert estimate and truth to factor
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),
match_win = factor(match_win))  # Convert match_win to factor
# Calculate accuracy based on actual results and predictions
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
# Print accuracy score
print(accuracy_score)
roc_auc(test_results, truth = factor(match_win), .pred = predictions)
roc_auc(test_results, truth = factor(match_win), .pred = predictions)
View(test_results)
roc_auc(test_results, truth = match_win, .pred = predictions)
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),  # Convert predicted_class to factor
match_win = factor(match_win),        # Convert match_win to factor
predictions = predict(log_model, newdata = test_data, type = "response"))  # Add predicted probabilities
# Print accuracy score
print(accuracy_score)
roc_auc(test_results, truth = match_win, .pred = predictions)
tidy(log_model, exponentiate = TRUE, conf.int = TRUE)
r6_data %>%
ggplot(aes(x = factor(early_win_indicator), fill = factor(match_win))) +
geom_bar(position = "fill") +
labs(x = "Early Win (1 = Yes)", y = "Proportion", fill = "Match Win") +
theme_minimal()
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary - p value less than 0.05
summary(log_model)
predictions <- predict(log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),
match_win = factor(match_win))  # Convert match_win to factor
# Calculate accuracy based on actual results and predictions
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
# Print accuracy score
print(accuracy_score)
# Calculate odds ratio for rocket league
tidy(log_model, exponentiate = TRUE, conf.int = TRUE)
rocket_data %>%
ggplot(aes(x = factor(early_win_indicator), fill = factor(match_win))) +
geom_bar(position = "fill") +
labs(x = "Early Win (1 = Yes)", y = "Proportion", fill = "Match Win")
