mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
# train + test split ------------------------------------------------------
# Split rocket league data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
# model -------------------------------------------------------------------
# Fitting a bayesian logistic regression model with a weak normal prior
prior <- set_prior("normal(0, 1)", class = "b")
bayesian_log_model <- brm(match_win ~ early_win_indicator,
family = bernoulli(),
data = train_data,
prior = prior)
# model evaluation --------------------------------------------------------
# summary stats
summary(bayesian_log_model)
# Generate predictions (posterior predictive draws)
predictions <- predict(bayesian_log_model, newdata = test_data, type = "response")
# Average across the draws for each observation
mean_preds <- rowMeans(predictions)
# Convert predicted probabilities into 1 for win or 0 for loss
predicted_class <- ifelse(mean_preds >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
# Add model eval with yardstick
test_results <- test_data %>%
mutate(pred = rowMeans(predict(bayesian_log_model, newdata = test_data, type = "response")),
pred_class = factor(ifelse(pred >= 0.5, 1, 0)),
match_win = factor(match_win))
# Accuracy
accuracy(test_results, truth = match_win, estimate = pred_class)
library(tidyverse)
library(caret)
library(ggplot2)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
# data load + clean --------------------------------------------------------------
# Constructs the URL for the Google sheet that contains the R6 data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url) # construct data frame
r6 <- r6 %>%
rename_all(tolower) # make all column names lowercase
# wrangling ---------------------------------------------------------------
# Make new columns indicating if team a won the match and if they had more early round wins
r6_data <- r6 %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(early_rounds_won_a > early_rounds_won_b, 1, 0))
# train and test split ----------------------------------------------------
# Split R6 data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(r6_data$match_win, p = 0.8, list = FALSE)
train_data <- r6_data[train_index, ]
test_data <- r6_data[-train_index, ]
# model -------------------------------------------------------------------
# Fit the logistic regression model
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary - p value less than 0.05
summary(log_model)
# predictions + evaluation -------------------------------------------------------------
# Generate predictions using the logistic regression model on the test data
predictions <- predict(log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
# Added model performance metrics with yardstick
# Convert estimate and truth to factor
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),
match_win = factor(match_win))  # Convert match_win to factor
# Calculate accuracy based on actual results and predictions
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
# Print accuracy score
print(accuracy_score)
# Calculate odds ratio for r6
tidy(log_model, exponentiate = TRUE, conf.int = TRUE)
# visualizations ----------------------------------------------------------
# Plot distribution of win rates based on early win indicator
r6_data %>%
ggplot(aes(x = factor(early_win_indicator), fill = factor(match_win))) +
geom_bar(position = "fill") +
labs(x = "Early Win (1 = Yes)", y = "Proportion", fill = "Match Win")
library(tidyverse)
library(randomForest)
library(caret)
library(ggplot2)
set.seed(1999)
options(scipen=999)
# data load + clean -------------------------------------------------------
# Constructs the URL for the Google sheet that contains the R6 data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url) # construct data frame
r6 <- r6 %>%
rename_all(tolower) # make all column names lowercase
# wrangling ---------------------------------------------------------------
# Make new columns indicating if team a won the match and if they had more early round wins
r6_data <- r6 %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(early_rounds_won_a > early_rounds_won_b, 1, 0))
# train + test split ------------------------------------------------------
# Split R6 data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(r6_data$match_win, p = 0.8, list = FALSE)
train_data <- r6_data[train_index, ]
test_data <- r6_data[-train_index, ]
View(test_data)
rf_model <- randomForest(match_win ~ early_win_indicator, data = train_data, importance = TRUE)
varImpPlot(rf_model)
summary(rf_model)
# Predictions
predictions <- predict(rf_model, newdata = test_data)
# Confusion Matrix
conf_matrix <- table(predictions, test_data$match_win)
# Accuracy calculation
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy: ", accuracy))
library(tidyverse)
library(randomForest)
library(caret)
library(ggplot2)
set.seed(1999)
options(scipen=999)
# data load + clean -------------------------------------------------------
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# wrangling ---------------------------------------------------------------
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
# train + test split ------------------------------------------------------
# Split rocket league data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
# model -------------------------------------------------------------------
rf_model <- randomForest(match_win ~ early_win_indicator, data = train_data, importance = TRUE)
varImpPlot(rf_model)
# model evaluation --------------------------------------------------------
# Predictions
predictions <- predict(rf_model, newdata = test_data)
# Confusion Matrix
conf_matrix <- table(predictions, test_data$match_win)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy: ", accuracy))
library(readxl)
library(dplyr)
library(ggplot2)
library(zoo)
library(depmixS4)
library(readxl)
library(dplyr)
library(ggplot2)
library(zoo)
library(depmixS4)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
df <- read_csv(url) # construct data frame
library(tidyverse)
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
df <- read_csv(url) # construct data frame
df <- df %>%
rename_all(tolower) # make all column names lowercase
# Preview structure
str(df)
head(df)
# Create one row per team per match
long_df <- df %>%
rowwise() %>%
do(rbind(
data.frame(
Match_ID = .$Match_ID,
Team = .$Team_A,
Opponent = .$Team_B,
Team_Score = .$Score_A,
Opponent_Score = .$Score_B,
Result = ifelse(.$Winner == .$Team_A, 1, 0)
),
data.frame(
Match_ID = .$Match_ID,
Team = .$Team_B,
Opponent = .$Team_A,
Team_Score = .$Score_B,
Opponent_Score = .$Score_A,
Result = ifelse(.$Winner == .$Team_B, 1, 0)
)
))
long_df <- long_df %>%
arrange(Team, Match_ID) %>%
group_by(Team) %>%
mutate(Match_Number = row_number()) %>%
ungroup()
library(readxl)
library(dplyr)
library(ggplot2)
library(zoo)
library(depmixS4)
library(tidyverse)
# data load + clean -------------------------------------------------------
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
df <- read_csv(url) # construct data frame
df <- df %>%
rename_all(tolower) # make all column names lowercase
# Preview structure
str(df)
head(df)
long_df <- df %>%
rowwise() %>%
do(rbind(
data.frame(
Match_ID = .$Match_ID,
Team = .$Team_A,
Opponent = .$Team_B,
Team_Score = .$Score_A,
Opponent_Score = .$Score_B,
Result = ifelse(.$Winner == .$Team_A, 1, 0)
),
data.frame(
Match_ID = .$Match_ID,
Team = .$Team_B,
Opponent = .$Team_A,
Team_Score = .$Score_B,
Opponent_Score = .$Score_A,
Result = ifelse(.$Winner == .$Team_B, 1, 0)
)
))
long_df <- long_df %>%
arrange(Team, Match_ID) %>%
group_by(Team) %>%
mutate(Match_Number = row_number()) %>%
ungroup()
View(long_df)
long_df <- df %>%
rowwise() %>%
do(rbind(
data.frame(
match_ID = .$match_ID,
team = .$team_A,
Opponent = .$team_B,
Team_Score = .$score_A,
Opponent_Score = .$score_B,
Result = ifelse(.$winner == .$team_A, 1, 0)
),
data.frame(
Match_ID = .$match_ID,
Team = .$team_B,
Opponent = .$team_A,
Team_Score = .$score_B,
Opponent_Score = .$score_A,
Result = ifelse(.$winner == .$team_B, 1, 0)
)
))
View(long_df)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
df <- read_csv(url) # construct data frame
df <- df %>%
rename_all(tolower) # make all column names lowercase
# Preview structure
str(df)
head(df)
# preprocessing -------------------------------------------------------
# Create one row per team per match
long_df <- df %>%
rowwise() %>%
do(rbind(
data.frame(
match_ID = .$match_ID,
team = .$team_A,
Opponent = .$team_B,
Team_Score = .$score_A,
Opponent_Score = .$score_B,
Result = ifelse(.$winner == .$team_A, 1, 0)
),
data.frame(
Match_ID = .$match_ID,
Team = .$team_B,
Opponent = .$team_A,
Team_Score = .$score_B,
Opponent_Score = .$score_A,
Result = ifelse(.$winner == .$team_B, 1, 0)
)
))
long_df <- long_df %>%
arrange(Team, Match_ID) %>%
group_by(Team) %>%
mutate(Match_Number = row_number()) %>%
ungroup()
# Preview
head(long_df)
# Create one row per team per match
long_df <- df %>%
rowwise() %>%
do(rbind(
data.frame(
match_ID = .$match_id,
team = .$team_a,
Opponent = .$team_b,
Team_Score = .$score_a,
Opponent_Score = .$score_b,
Result = ifelse(.$winner == .$team_a, 1, 0)
),
data.frame(
Match_ID = .$match_ID,
Team = .$team_b,
Opponent = .$team_a,
Team_Score = .$score_b,
Opponent_Score = .$score_a,
Result = ifelse(.$winner == .$team_b, 1, 0)
)
))
long_df <- df %>%
rowwise() %>%
do(rbind(
data.frame(
match_ID = .$match_id,
team = .$team_a,
Opponent = .$team_b,
Team_Score = .$score_a,
Opponent_Score = .$score_b,
Result = ifelse(.$winner == .$team_a, 1, 0)
),
data.frame(
Match_ID = .$match_id,
Team = .$team_b,
Opponent = .$team_a,
Team_Score = .$score_b,
Opponent_Score = .$score_a,
Result = ifelse(.$winner == .$team_b, 1, 0)
)
))
long_df <- df %>%
rowwise() %>%
do(rbind(
data.frame(
match_id = .$match_id,
team = .$team_a,
opponent = .$team_b,
team_score = .$score_a,
opponent_score = .$score_b,
result = ifelse(.$winner == .$team_a, 1, 0)
),
data.frame(
match_id = .$match_id,
team = .$team_b,
opponent = .$team_a,
team_score = .$score_b,
opponent_score = .$score_a,
result = ifelse(.$winner == .$team_b, 1, 0)
)
))
View(long_df)
long_df <- long_df %>%
arrange(team, match_id) %>%
group_by(team) %>%
mutate(match_number = row_number()) %>%
ungroup()
# Preview
head(long_df)
# Plot W/L time series and rolling winrate for each team
teams <- unique(long_df$team)
for (team in teams) {
team_df <- long_df %>% filter(team == team)
# Rolling win rate (k = 3)
team_df <- team_df %>%
arrange(Match_Number) %>%
mutate(RollingWinRate = rollmean(Result, k = 3, fill = NA, align = "right"))
# Plot: Time series of W/L
p1 <- ggplot(team_df, aes(x = Match_Number, y = Result)) +
geom_line(group = 1) +
geom_point(aes(color = factor(Result)), size = 3) +
scale_color_manual(values = c("red", "green"), labels = c("Loss", "Win")) +
labs(title = paste("W/L Time Series -", team), y = "Result", x = "Match") +
theme_minimal()
print(p1)
# Plot: Rolling Win Rate
p2 <- ggplot(team_df, aes(x = Match_Number, y = RollingWinRate)) +
geom_line(color = "steelblue") +
geom_point(size = 2, color = "darkblue") +
labs(title = paste("Rolling Win Rate (k=3) -", team), y = "Win Rate", x = "Match") +
theme_minimal()
print(p2)
}
for (team in teams) {
team_df <- long_df %>% filter(team == team)
# Rolling win rate (k = 3)
team_df <- team_df %>%
arrange(match_number) %>%
mutate(RollingWinRate = rollmean(Result, k = 3, fill = NA, align = "right"))
# Plot: Time series of W/L
p1 <- ggplot(team_df, aes(x = match_number, y = Result)) +
geom_line(group = 1) +
geom_point(aes(color = factor(result)), size = 3) +
scale_color_manual(values = c("red", "green"), labels = c("Loss", "Win")) +
labs(title = paste("W/L Time Series -", team), y = "Result", x = "Match") +
theme_minimal()
print(p1)
# Plot: Rolling Win Rate
p2 <- ggplot(team_df, aes(x = match_number, y = RollingWinRate)) +
geom_line(color = "steelblue") +
geom_point(size = 2, color = "darkblue") +
labs(title = paste("Rolling Win Rate (k=3) -", team), y = "Win Rate", x = "Match") +
theme_minimal()
print(p2)
}
for (team in teams) {
team_df <- long_df %>% filter(team == team)
# Rolling win rate (k = 3)
team_df <- team_df %>%
arrange(match_number) %>%
mutate(RollingWinRate = rollmean(Result, k = 3, fill = NA, align = "right"))
# Plot: Time series of W/L
p1 <- ggplot(team_df, aes(x = match_number, y = result)) +
geom_line(group = 1) +
geom_point(aes(color = factor(result)), size = 3) +
scale_color_manual(values = c("red", "green"), labels = c("Loss", "Win")) +
labs(title = paste("W/L Time Series -", team), y = "Result", x = "Match") +
theme_minimal()
print(p1)
# Plot: Rolling Win Rate
p2 <- ggplot(team_df, aes(x = match_number, y = RollingWinRate)) +
geom_line(color = "steelblue") +
geom_point(size = 2, color = "darkblue") +
labs(title = paste("Rolling Win Rate (k=3) -", team), y = "Win Rate", x = "Match") +
theme_minimal()
print(p2)
}
for (team in teams) {
team_df <- long_df %>% filter(team == team)
# Rolling win rate (k = 3)
team_df <- team_df %>%
arrange(match_number) %>%
mutate(RollingWinRate = rollmean(result, k = 3, fill = NA, align = "right"))
# Plot: Time series of W/L
p1 <- ggplot(team_df, aes(x = match_number, y = result)) +
geom_line(group = 1) +
geom_point(aes(color = factor(result)), size = 3) +
scale_color_manual(values = c("red", "green"), labels = c("Loss", "Win")) +
labs(title = paste("W/L Time Series -", team), y = "Result", x = "Match") +
theme_minimal()
print(p1)
# Plot: Rolling Win Rate
p2 <- ggplot(team_df, aes(x = match_number, y = RollingWinRate)) +
geom_line(color = "steelblue") +
geom_point(size = 2, color = "darkblue") +
labs(title = paste("Rolling Win Rate (k=3) -", team), y = "Win Rate", x = "Match") +
theme_minimal()
print(p2)
}
for (team in teams) {
team_df <- long_df %>% filter(team == team)
# Rolling win rate (k = 3)
team_df <- team_df %>%
arrange(match_number) %>%
mutate(RollingWinRate = rollmean(result, k = 3, fill = NA, align = "right"))
# Plot: Time series of W/L
p1 <- ggplot(team_df, aes(x = match_number, y = result)) +
geom_line(group = 1) +
geom_point(aes(color = factor(result)), size = 3) +
scale_color_manual(values = c("red", "green"), labels = c("Loss", "Win")) +
labs(title = paste("W/L Time Series -", team), y = "Result", x = "Match") +
theme_minimal()
print(p1)
# Plot: Rolling Win Rate
p2 <- ggplot(team_df, aes(x = match_number, y = RollingWinRate)) +
geom_line(color = "steelblue") +
geom_point(size = 2, color = "darkblue") +
labs(title = paste("Rolling Win Rate (k=3) -", team), y = "Win Rate", x = "Match") +
theme_minimal()
print(p2)
}
View(p1)
for (team in teams) {
team_df <- long_df %>% filter(team == team)
if (nrow(team_df) >= 6) {  # Minimum matches for meaningful HMM
hmm_model <- depmix(response = result ~ 1, family = binomial(), nstates = 2, data = team_df)
fitted <- fit(hmm_model, verbose = FALSE)
team_df$State <- posterior(fitted)$state
p3 <- ggplot(team_df, aes(x = match_number, y = result)) +
geom_point(aes(color = factor(State)), size = 3) +
geom_line(alpha = 0.5, group = 1) +
scale_color_manual(values = c("blue", "orange"), labels = c("State 1", "State 2")) +
labs(title = paste("HMM State Detection -", team), y = "Result", x = "Match") +
theme_minimal()
print(p3)
}
}
