accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
# Print accuracy score
print(accuracy_score)
# Calculate odds ratio for r6
tidy(log_model, exponentiate = TRUE, conf.int = TRUE)
# Calculate odds ratio for r6
tidy(log_model, exponentiate = TRUE, conf.int = TRUE)
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
library(broom)
library(rstanarm)
set.seed(1999)
options(scipen=999)
# Plot distribution of win rates based on early win indicator
r6_data %>%
ggplot(aes(x = factor(early_win_indicator), fill = factor(match_win))) +
geom_bar(position = "fill") +
labs(x = "Early Win (1 = Yes)", y = "Proportion", fill = "Match Win")
# Calculate odds ratio for r6
tidy(log_model, exponentiate = TRUE, conf.int = TRUE)
# Calculate odds ratio for r6
tidy(bayesian_log_model, exponentiate = TRUE, conf.int = TRUE)
# libraries ---------------------------------------------------------------
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
# Split rocket league data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
bayesian_log_model <- stan_glm(match_win ~ early_win_indicator,
family = "binomial",
data = train_data,
prior = normal(0,1))
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
# data load _ clean -------------------------------------------------------
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
View(rocket_data)
# Split rocket league data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
bayesian_log_model <- stan_glm(match_win ~ early_win_indicator,
family = "binomial",
data = train_data,
prior = normal(0,1))
# summary stats
summary(bayesian_log_model)
# Generate predictions using the logistic regression model on the test data
predictions <- predict(bayesian_log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),
match_win = factor(match_win))  # Convert match_win to factor
# Calculate accuracy based on actual results and predictions
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
# Print accuracy score
print(accuracy_score)
library(tidyverse)
library(caret)
library(ggplot2)
library(brms)
library(readr)
library(bayestestR)  # Added for probability of direction analysis
library(bayesplot)    # Added for posterior predictive checks
set.seed(1999)       # Set seed for reproducibility
# Constructs the URL for the Google sheet that contains the R6 data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
Capstone_Data <- read_csv(url) # construct data frame
# Ensure column names are lowercase
Capstone_Data <- Capstone_Data %>%
rename_all(tolower)
# Construct longer dataframe to track whether or not each team won and/or had more early wins
# for each match
df_long <- Capstone_Data %>%
pivot_longer(cols = c(team_a, team_b), names_to = "role", values_to = "team") %>%
mutate(
win = ifelse(team == winner, 1, 0),
early_wins = ifelse(
(role == "team_a" & early_rounds_won_a == 1) |
(role == "team_b" & early_rounds_won_b == 1), 1, 0)
) %>%
select(team, win, early_wins)
# Ensure 'team' is a factor for random effects
df_long$team <- as.factor(df_long$team)
# Fits a bayesian logistic regression model predicting the probability of a win based on
# whether a team scored the first goal, with a random effect for team strength, using
# the brm function
bayes_model_r6 <- brm(
win ~ early_wins + (1 | team),  # Random effect for team strength
data = df_long,
family = bernoulli(),
prior = c(set_prior("normal(0, 1)", class = "b")),  # Weakly informative prior
chains = 4, iter = 2000, warmup = 500, cores = 4
)
# view estimates
summary(bayes_model_r6)
# view estimates
summary(bayes_model_r6)
# visualize model's coefficients and check fit
plot(bayes_model_r6)
posterior_intervals <- posterior_samples(bayes_model_r6) %>%
summarise(
lower = quantile(b_first_goal, 0.025),
median = quantile(b_first_goal, 0.5),
upper = quantile(b_first_goal, 0.975)
)
# view estimates
summary(bayes_model_r6)
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
library(tidyverse)
library(dplyr)
library(caret)
library(randomForest)
library(ggplot2)
library(readr)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url) # construct data frame
r6 <- r6 %>%
rename_all(tolower) # make all column names lowercase
r6_data <- r6 %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(early_rounds_won_a > early_rounds_won_b, 1, 0))
# train + test split ------------------------------------------------------
# Split R6 data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(r6_data$match_win, p = 0.8, list = FALSE)
train_data <- r6_data[train_index, ]
test_data <- r6_data[-train_index, ]
bayesian_log_model <- brm(match_win ~ early_win_indicator,
family = bernoulli(),
data = train_data)
install.packages("brms")
library(brms)
bayesian_log_model <- brm(match_win ~ early_win_indicator,
family = bernoulli(),
data = train_data)
# summary stats
summary(bayesian_log_model)
prior <- set_prior("normal(0, 1)", class = "b")
bayesian_log_model <- brm(match_win ~ early_win_indicator,
family = bernoulli(),
data = train_data,
prior = prior)
# summary stats
summary(bayesian_log_model)
predictions <- predict(bayesian_log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
# Average across the draws for each observation
mean_preds <- rowMeans(predictions)
# Convert predicted probabilities into 1 (win) or 0 (loss)
predicted_class <- ifelse(mean_preds >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
# Generate predictions (posterior predictive draws)
predictions <- predict(bayesian_log_model, newdata = test_data, type = "response")
# Average across the draws for each observation
mean_preds <- rowMeans(predictions)
# Convert predicted probabilities into 1 for win or 0 for loss
predicted_class <- ifelse(mean_preds >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
# Add model eval with yardstick
test_results <- test_data %>%
mutate(pred = rowMeans(predict(bayesian_log_model, newdata = test_data, type = "response")),
pred_class = factor(ifelse(pred >= 0.5, 1, 0)),
match_win = factor(match_win))
# Accuracy, precision, recall, AUC
accuracy(test_results, truth = match_win, estimate = pred_class)
roc_auc(test_results, truth = match_win, estimate = pred)
library(tidyverse)
library(dplyr)
library(caret)
library(readr)
library(yardstick)
library(brms)
set.seed(1999)
options(scipen=999)
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
prior <- set_prior("normal(0, 1)", class = "b")
bayesian_log_model <- brm(match_win ~ early_win_indicator,
family = bernoulli(),
data = train_data,
prior = prior)
# summary stats
summary(bayesian_log_model)
# Generate predictions (posterior predictive draws)
predictions <- predict(bayesian_log_model, newdata = test_data, type = "response")
# Average across the draws for each observation
mean_preds <- rowMeans(predictions)
# Convert predicted probabilities into 1 for win or 0 for loss
predicted_class <- ifelse(mean_preds >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
# Add model eval with yardstick
test_results <- test_data %>%
mutate(pred = rowMeans(predict(bayesian_log_model, newdata = test_data, type = "response")),
pred_class = factor(ifelse(pred >= 0.5, 1, 0)),
match_win = factor(match_win))
# Accuracy
accuracy(test_results, truth = match_win, estimate = pred_class)
library(tidyverse)
library(caret)
library(ggplot2)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
# data load + clean -------------------------------------------------------
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# wrangling ---------------------------------------------------------------
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
# train + test split ------------------------------------------------------
# Split rocket league data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
# model -------------------------------------------------------------------
# Fit the logistic regression model
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary - p value less than 0.05
summary(log_model)
# predictions + evaluation -------------------------------------------------------------
# Generate predictions using the logistic regression model on the test data
predictions <- predict(log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
# Added model performance metrics with yardstick
# Convert estimate and truth to factor
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),
match_win = factor(match_win))  # Convert match_win to factor
# Calculate accuracy based on actual results and predictions
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
# Print accuracy score
print(accuracy_score)
# Calculate odds ratio for rocket league
tidy(log_model, exponentiate = TRUE, conf.int = TRUE)
# visualization -----------------------------------------------------------
# Plot distribution of win rates based on early win indicator
rocket_data %>%
ggplot(aes(x = factor(early_win_indicator), fill = factor(match_win))) +
geom_bar(position = "fill") +
labs(x = "Early Win (1 = Yes)", y = "Proportion", fill = "Match Win")
library(tidyverse)
library(caret)
library(ggplot2)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
# data load _ clean -------------------------------------------------------
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# wrangling ---------------------------------------------------------------
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
# train + test split ------------------------------------------------------
# Split rocket league data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
# model -------------------------------------------------------------------
# Fitting a bayesian logistic regression model with a weak normal prior
prior <- set_prior("normal(0, 1)", class = "b")
bayesian_log_model <- brm(match_win ~ early_win_indicator,
family = bernoulli(),
data = train_data,
prior = prior)
# model evaluation --------------------------------------------------------
# summary stats
summary(bayesian_log_model)
# Generate predictions (posterior predictive draws)
predictions <- predict(bayesian_log_model, newdata = test_data, type = "response")
# Average across the draws for each observation
mean_preds <- rowMeans(predictions)
# Convert predicted probabilities into 1 for win or 0 for loss
predicted_class <- ifelse(mean_preds >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
# Add model eval with yardstick
test_results <- test_data %>%
mutate(pred = rowMeans(predict(bayesian_log_model, newdata = test_data, type = "response")),
pred_class = factor(ifelse(pred >= 0.5, 1, 0)),
match_win = factor(match_win))
# Accuracy
accuracy(test_results, truth = match_win, estimate = pred_class)
library(tidyverse)
library(caret)
library(ggplot2)
library(yardstick)
library(broom)
set.seed(1999)
options(scipen=999)
# data load + clean --------------------------------------------------------------
# Constructs the URL for the Google sheet that contains the R6 data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url) # construct data frame
r6 <- r6 %>%
rename_all(tolower) # make all column names lowercase
# wrangling ---------------------------------------------------------------
# Make new columns indicating if team a won the match and if they had more early round wins
r6_data <- r6 %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(early_rounds_won_a > early_rounds_won_b, 1, 0))
# train and test split ----------------------------------------------------
# Split R6 data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(r6_data$match_win, p = 0.8, list = FALSE)
train_data <- r6_data[train_index, ]
test_data <- r6_data[-train_index, ]
# model -------------------------------------------------------------------
# Fit the logistic regression model
log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
# Check the model summary - p value less than 0.05
summary(log_model)
# predictions + evaluation -------------------------------------------------------------
# Generate predictions using the logistic regression model on the test data
predictions <- predict(log_model, newdata = test_data, type = "response")
# Convert predicted probabilities into 1 for win, 0 for loss
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
# Confusion Matrix to compare predictions vs actual
conf_matrix <- table(predicted_class, test_data$match_win)
print(conf_matrix)
# Added model performance metrics with yardstick
# Convert estimate and truth to factor
test_results <- test_data %>%
mutate(predicted = factor(predicted_class),
match_win = factor(match_win))  # Convert match_win to factor
# Calculate accuracy based on actual results and predictions
accuracy_score <- accuracy(test_results, truth = match_win, estimate = predicted)
# Print accuracy score
print(accuracy_score)
# Calculate odds ratio for r6
tidy(log_model, exponentiate = TRUE, conf.int = TRUE)
# visualizations ----------------------------------------------------------
# Plot distribution of win rates based on early win indicator
r6_data %>%
ggplot(aes(x = factor(early_win_indicator), fill = factor(match_win))) +
geom_bar(position = "fill") +
labs(x = "Early Win (1 = Yes)", y = "Proportion", fill = "Match Win")
library(tidyverse)
library(randomForest)
library(caret)
library(ggplot2)
set.seed(1999)
options(scipen=999)
# data load + clean -------------------------------------------------------
# Constructs the URL for the Google sheet that contains the R6 data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
r6 <- read_csv(url) # construct data frame
r6 <- r6 %>%
rename_all(tolower) # make all column names lowercase
# wrangling ---------------------------------------------------------------
# Make new columns indicating if team a won the match and if they had more early round wins
r6_data <- r6 %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(early_rounds_won_a > early_rounds_won_b, 1, 0))
# train + test split ------------------------------------------------------
# Split R6 data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(r6_data$match_win, p = 0.8, list = FALSE)
train_data <- r6_data[train_index, ]
test_data <- r6_data[-train_index, ]
View(test_data)
rf_model <- randomForest(match_win ~ early_win_indicator, data = train_data, importance = TRUE)
varImpPlot(rf_model)
summary(rf_model)
# Predictions
predictions <- predict(rf_model, newdata = test_data)
# Confusion Matrix
conf_matrix <- table(predictions, test_data$match_win)
# Accuracy calculation
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy: ", accuracy))
library(tidyverse)
library(randomForest)
library(caret)
library(ggplot2)
set.seed(1999)
options(scipen=999)
# data load + clean -------------------------------------------------------
# Constructs the URL for the Google sheet that contains the Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) # construct data frame
rocket_league <- rocket_league %>%
rename_all(tolower) # make all column names lowercase
# wrangling ---------------------------------------------------------------
# Make new columns indicating if team a won the match and if they scored the first goal
rocket_data <- rocket_league %>%
mutate(match_win = ifelse(winner == team_a, 1, 0),
early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0))
# train + test split ------------------------------------------------------
# Split rocket league data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]
# model -------------------------------------------------------------------
rf_model <- randomForest(match_win ~ early_win_indicator, data = train_data, importance = TRUE)
varImpPlot(rf_model)
# model evaluation --------------------------------------------------------
# Predictions
predictions <- predict(rf_model, newdata = test_data)
# Confusion Matrix
conf_matrix <- table(predictions, test_data$match_win)
# Accuracy
accuracy <- sum(diag(conf_matrix)) / sum(conf_matrix)
print(paste("Accuracy: ", accuracy))
