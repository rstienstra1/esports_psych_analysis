---
title: "Esports Psychological Momentum Analysis"
format:
  dashboard:
    theme: cosmo
    css: styles.css
    orientation: rows
    sidebar-width: 300px  
    content-width: 1600px
editor: visual
execute:
  echo: false
  message: false
  warning: false
  error: false
page-layout: full
---

```{r}
#| title: "Comparison Stats - Log regn"
#| echo: false
#| output: false
library(tidyverse)
library(caret)
library(ggplot2)
library(yardstick)
library(broom)
library(brms)
library(tidybayes)
library(randomForest)
set.seed(1999)
options(scipen=999)

# Load Rocket League data
sheet_id <- "1JWk84PgKI_DNqgl8ncdx8_KJpBi7l7ZuoHrCutoBnGc"
gid <- "0"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rocket_league <- read_csv(url) %>% rename_all(tolower)

# Wrangle Rocket League data
rocket_data <- rocket_league %>%
  mutate(match_win = ifelse(winner == team_a, 1, 0),
         early_win_indicator = ifelse(first_goal_a > first_goal_b, 1, 0),
         team_a_win = ifelse(winner == team_a, 1, 0),
         team_a_scored_first = ifelse(first_goal_a == 1, 1, 0),
         goal_diff = score_a - score_b,
         first_goal_scorer = case_when(
           first_goal_a == 1 ~ "Team A",
           first_goal_b == 1 ~ "Team B",
           TRUE ~ "Neither"
         )) %>%
  filter(!is.na(first_goal_scorer))

# Train/test split Rocket League
train_index <- createDataPartition(rocket_data$match_win, p = 0.8, list = FALSE)
train_data <- rocket_data[train_index, ]
test_data <- rocket_data[-train_index, ]

# Logistic regression Rocket League
classic_log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
rocket_odds <- tidy(classic_log_model, exponentiate = TRUE, conf.int = TRUE)

# Load Rainbow 6 data
gid <- "716521061"
url <- paste0("https://docs.google.com/spreadsheets/d/", sheet_id, "/export?format=csv&gid=", gid)
rainbow_df <- read_csv(url) %>% rename_all(tolower)

# Wrangle R6 data for binary classification
r6_data <- rainbow_df %>%
  mutate(match_win = ifelse(winner == team_a, 1, 0),
         early_win_indicator = ifelse(early_rounds_won_a > early_rounds_won_b, 1, 0))
train_index <- createDataPartition(r6_data$match_win, p = 0.8, list = FALSE)
train_data <- r6_data[train_index, ]
test_data <- r6_data[-train_index, ]
classic_log_model <- glm(match_win ~ early_win_indicator, family = "binomial", data = train_data)
r6_odds <- tidy(classic_log_model, exponentiate = TRUE, conf.int = TRUE)

# Combine odds
rocket_odds$Game <- "Rocket League"
r6_odds$Game <- "Rainbow 6 Siege"
combined_odds <- bind_rows(
  subset(rocket_odds, term == "early_win_indicator"),
  subset(r6_odds, term == "early_win_indicator")
)

# Confusion matrix Rocket League
predictions <- predict(classic_log_model, newdata = test_data, type = "response")
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
conf_matrix <- table(predicted_class, test_data$match_win)
conf_matrix_df <- as.data.frame(conf_matrix)
colnames(conf_matrix_df) <- c("Predicted", "Actual", "Count")

# R6 Seed Modeling Block
rainbow_long <- rainbow_df %>%
  mutate(team1 = team_a, team2 = team_b) %>%
  pivot_longer(cols = c(team1, team2), names_to = "team_position", values_to = "team") %>%
  mutate(
    opponent = ifelse(team_position == "team1", team_b, team_a),
    early_wins = ifelse(team_position == "team1", early_rounds_won_a, early_rounds_won_b),
    opp_early_wins = ifelse(team_position == "team1", early_rounds_won_b, early_rounds_won_a),
    early_loss = ifelse(early_wins < opp_early_wins, 1, 0),
    match_win = ifelse(winner == team, 1, 0)
  ) %>%
  select(match_id, team, opponent, early_loss, match_win) %>%
  group_by(team) %>%
  arrange(match_id) %>%
  mutate(seed_proxy = lag(cumsum(match_win), default = 0)) %>%
  ungroup()

rainbow_model <- glm(match_win ~ early_loss * seed_proxy, data = rainbow_long, family = binomial())

seed_range_r6 <- seq(min(rainbow_long$seed_proxy), max(rainbow_long$seed_proxy), by = 1)
newdata_r6 <- expand.grid(early_loss = c(0, 1), seed_proxy = seed_range_r6)
newdata_r6$predicted_prob <- predict(rainbow_model, newdata = newdata_r6, type = "response")
newdata_r6$early_loss_label <- ifelse(newdata_r6$early_loss == 1, "Early Loss", "No Early Loss")

# Rocket League Seed Modeling Block
rocket_long <- rocket_data %>%
  mutate(game_num = row_number()) %>%
  rowwise() %>%
  mutate(team1 = team_a, team2 = team_b) %>%
  ungroup() %>%
  pivot_longer(cols = c(team1, team2),
               names_to = "team_position",
               values_to = "team") %>%
  mutate(opponent = ifelse(team_position == "team1", team_b, team_a),
         score = ifelse(team_position == "team1", score_a, score_b),
         opp_score = ifelse(team_position == "team1", score_b, score_a),
         match_win = ifelse(winner == team, 1, 0),
         early_loss = ifelse((first_goal_a == 0 & team_position == "team1") |
                               (first_goal_b == 0 & team_position == "team2"), 1, 0)) %>%
  select(match_id, team, opponent, score, opp_score, match_win, early_loss)

rocket_long <- rocket_long %>%
  group_by(team) %>%
  arrange(match_id) %>%
  mutate(seed_proxy = lag(cumsum(match_win), default = 0)) %>%
  ungroup()

rocket_model <- glm(match_win ~ early_loss * seed_proxy, data = rocket_long, family = binomial())

seed_range <- seq(min(rocket_long$seed_proxy), max(rocket_long$seed_proxy), by = 1)
newdata <- expand.grid(early_loss = c(0, 1), seed_proxy = seed_range)
newdata$predicted_prob <- predict(rocket_model, newdata = newdata, type = "response")
newdata$early_loss_label <- ifelse(newdata$early_loss == 1, "Early Loss", "No Early Loss")
```

```{r}
#| title: "Stats - R6 Bayesian"
#| echo: false
#| output: false
# Split R6 data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(r6_data$match_win, p = 0.8, list = FALSE)
train_data <- r6_data[train_index, ]
test_data <- r6_data[-train_index, ]

```

::: dashboard-tabset
# Comparative {.tabset}

## Row 1 {height="25%"}

### Column 1 {width="100%"}

```{r}

# visualization -----------------------------------------------------------

# Bar plot the combined odds comparison

library(ggiraph)
combined_odds <- combined_odds %>%
  mutate(tooltip_text = paste0(
    Game, "
Estimate: ", round(estimate, 2),
    "
CI: [", round(conf.low, 2), ", ", round(conf.high, 2), "]"
  ))
interactive_plot <- ggplot(combined_odds, aes(x = Game, y = estimate)) +
  geom_col_interactive(aes(tooltip = tooltip_text, data_id = Game), fill = "lightblue") +
  geom_errorbar_interactive(aes(ymin = conf.low, ymax = conf.high, tooltip = tooltip_text, data_id = Game), width = 0.2) +
  scale_y_continuous(trans = "log10") +
  labs(title = "Impact of Early Wins on Match Outcomes",
       y = "Odds Ratio
(log scale)",
       x = "Game Title") +
  theme_minimal(base_size = 14) +
  theme(plot.title.position = "plot")
girafe(ggobj = interactive_plot, width_svg = 10, height_svg = 6)

```

## Row 2

### Column 2 {width="100%"}

```{r}
newdata_r6 <- newdata_r6 %>%
  mutate(tooltip = paste0("Seed: ", seed_proxy, "\n", early_loss_label, "\nProb: ", round(predicted_prob, 2)))

interactive_line_r6 <- ggplot(newdata_r6, aes(x = seed_proxy, y = predicted_prob, color = early_loss_label)) +
  geom_line_interactive(aes(group = early_loss_label, tooltip = tooltip, data_id = interaction(seed_proxy, early_loss_label)), size = 1.2) +
  labs(
    title = "Win Probability by Seed Strength & Early Loss",
    subtitle = "Rainbow 6 Siege",
    x = "Seed Proxy (Cumulative Wins Before Match)",
    y = "Predicted Probability\n(Winning)",
    color = "Early Loss"
  ) +
  theme_minimal(base_size = 14) +
  theme(legend.position = "bottom", plot.title.position = "plot")

girafe(ggobj = interactive_line_r6)
  
```

## Row 3

### Column 1 {width="100%"}

```{r}
newdata <- newdata %>%
  mutate(tooltip = paste0("Seed: ", seed_proxy, "\n", early_loss_label, "\nProb: ", round(predicted_prob, 2)))

interactive_line_rl <- ggplot(newdata, aes(x = seed_proxy, y = predicted_prob, color = early_loss_label)) +
  geom_line_interactive(aes(group = early_loss_label, tooltip = tooltip, data_id = interaction(seed_proxy, early_loss_label)), size = 1.2) +
  labs(
    title = "Win Probability by Seed Strength & Early Loss",
    subtitle = "Rocket League",
    x = "Seed Proxy (Cumulative Wins Before Match)",
    y = "Predicted Probability\n(Winning)",
    color = "Early Loss"
  ) +
  theme_minimal(base_size = 14) +
  theme(legend.position = "bottom", plot.title.position = "plot")

girafe(ggobj = interactive_line_rl)
```

# Rainbow 6 {.tabset}

## Row 1 {height="50%"}

### Column 1 {width="50%"}

```{r}
library(ggiraph)
# Plot distribution of win rates based on early win indicator
interactive_bar <- r6_data %>%
  mutate(early_win_indicator = factor(early_win_indicator, labels = c("Lost Early", "Won Early")),
         match_win = factor(match_win, labels = c("Loss", "Win"))) %>%
  ggplot(aes(x = early_win_indicator, fill = match_win, tooltip = match_win)) +
  geom_bar_interactive(position = "fill") +
  scale_fill_manual(values = c("Loss" = "lightblue", "Win" = "darkblue")) +
  labs(title = "Match Wins vs Early Round Outcome (R6)",
       x = "Early Round Win?", y = "Proportion", fill = "Match Result") +
  theme_minimal(base_size = 14) +
  theme(legend.position = "none",
        plot.title.position = "plot")

girafe(ggobj = interactive_bar)
```

### Column 2 {width="50%"}

```{r}
# Visualization 2: Distribution of early round wins
r6_data <- r6_data %>%
  mutate(tooltip = paste0("Early Wins: ", early_rounds_won_a))

interactive_hist <- ggplot(r6_data, aes(x = early_rounds_won_a)) +
  geom_histogram_interactive(aes(tooltip = tooltip, data_id = early_rounds_won_a),
                              binwidth = 1, fill = "steelblue", color = "white") +
  scale_x_continuous(breaks = 0:3) +
  labs(title = "Distribution of Early Round Wins by Team A",
       subtitle = "Out of first 3 rounds",
       x = "Number of Early Rounds Won by Team A",
       y = "Number of Matches") +
  theme_minimal(base_size = 14)

girafe(ggobj = interactive_hist)

```

## Row 2 {height="50%"}

### Column 1 {width="66%"}

```{r}
r6_data <- rainbow_df %>%
  mutate(match_win = ifelse(winner == team_a, 1, 0),
         early_win_indicator = ifelse(early_rounds_won_a > early_rounds_won_b, 1, 0),
         map = as.factor(map),
         match_win = as.factor(match_win))


# train + test split ------------------------------------------------------

# Split R6 data into training 80% and testing 20% sets based on match win (the target)
train_index <- createDataPartition(r6_data$match_win, p = 0.8, list = FALSE)
train_data <- r6_data[train_index, ]
test_data <- r6_data[-train_index, ]

# factor levels in test match training
test_data$map <- factor(test_data$map, levels = levels(train_data$map))

# model -------------------------------------------------------------------

rf_model <- randomForest(match_win ~ early_win_indicator + map, 
                         data = train_data, 
                         importance = TRUE)

# Convert to data frame and extract the column
var_importance_df <- as.data.frame(importance(rf_model))
var_importance_df$Variable <- rownames(var_importance_df)

plot_df <- var_importance_df %>%
  select(Variable, MeanDecreaseGini, MeanDecreaseAccuracy) %>%
  pivot_longer(cols = c("MeanDecreaseGini", "MeanDecreaseAccuracy"),
               names_to = "Metric", values_to = "Importance") %>%
  mutate(
    Variable = case_when(
      Variable == "early_win_indicator" ~ "Team A had more\nearly round wins",
      Variable == "map" ~ "Map played",
      TRUE ~ Variable
    ),
    Metric = case_when(
      Metric == "MeanDecreaseGini" ~ "Mean Decrease\nGini",
      Metric == "MeanDecreaseAccuracy" ~ "Mean Decrease\nAccuracy",
      TRUE ~ Metric
    )
  )


library(ggiraph)
plot_df <- plot_df %>%
  mutate(tooltip = paste0(Variable, "
", Metric, ": ", round(Importance, 1)))
importance_plot <- ggplot(plot_df, aes(x = reorder(Variable, Importance), y = Importance, fill = Metric)) +
  geom_col_interactive(aes(tooltip = tooltip, data_id = interaction(Variable, Metric)), 
                       position = position_dodge(width = 0.8), width = 0.7) +
  geom_text_interactive(aes(label = round(Importance, 1), tooltip = tooltip, data_id = interaction(Variable, Metric)),
                        position = position_dodge(width = 0.8),
                        hjust = -0.2, size = 3.5) +
  coord_flip() +
  scale_fill_manual(values = c("firebrick", "steelblue")) +
  scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +
  labs(
    title = "Variable Importance Metrics (Random Forest)",
    subtitle = "Comparison of Mean Decrease Gini and Mean Decrease Accuracy",
    x = NULL,
    y = "Importance",
    fill = "Metric"
  ) +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold"),
    axis.text = element_text(color = "black"),
    legend.position = "bottom"
  )
girafe(ggobj = importance_plot, width_svg = 8, height_svg = 5)

```

### Column 2 {width="33%"}

```{r}

```

### Column 3 {width="33%"}

```{r}

library(ggiraph)
conf_matrix_df <- conf_matrix_df %>%
  mutate(tooltip = paste0("Predicted: ", Predicted, "
Actual: ", Actual, "
Count: ", Count))
heatmap_plot <- ggplot(conf_matrix_df, aes(x = Actual, y = Predicted, fill = Count)) +
  geom_tile_interactive(aes(tooltip = tooltip, data_id = interaction(Predicted, Actual))) +
  geom_text(aes(label = Count), color = "white", size = 6) +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(title = "Confusion Matrix Heatmap - RandomForest (R6)", x = "Actual", y = "Predicted") +
  theme_minimal(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold"),
    axis.text = element_text(color = "white"),
    legend.position = "bottom"
  )
girafe(ggobj = heatmap_plot, width_svg = 10, height_svg = 7)

```

# Rocket League {.tabset}

## Row 1 {height="50%"}

### Column 1 {width="50%"}

```{r}
library(ggiraph)
# Prepare data
rocket_data <- rocket_data %>%
  mutate(first_goal_scorer = factor(first_goal_scorer, levels = c("Team A", "Team B", "Neither")),
         match_result = factor(team_a_win, labels = c("Team B Won Match", "Team A Won Match")),
         tooltip = paste("First Goal:", first_goal_scorer, "\nResult:", match_result))

# Create interactive bar plot
interactive_bar <- ggplot(rocket_data, aes(x = first_goal_scorer, fill = match_result)) +
  geom_bar_interactive(aes(tooltip = tooltip, data_id = interaction(first_goal_scorer, match_result)),
                       position = "fill") +
  scale_fill_manual(values = c("Team B Won Match" = "darkblue", "Team A Won Match" = "lightblue")) +
  labs(title = "Match Win Proportion by Early Round Outcome",
       subtitle = "Early rounds = first 3 rounds of the match",
       x = "Early Round Outcome",
       y = "Proportion of Matches",
       fill = "Match Outcome") +
  theme_minimal(base_size = 14) +
  theme(legend.position = "top")

# Render the interactive chart
girafe(ggobj = interactive_bar)

```

### Column 2 {width="50%"}

```{r}
# Add tooltips for variable importance
var_importance_df <- as.data.frame(importance(rf_model))
var_importance_df$Variable <- rownames(var_importance_df)

plot_df <- var_importance_df %>%
  select(Variable, MeanDecreaseGini, MeanDecreaseAccuracy) %>%
  pivot_longer(cols = c("MeanDecreaseGini", "MeanDecreaseAccuracy"),
               names_to = "Metric", values_to = "Importance") %>%
  mutate(tooltip = paste0(Variable, "\n", Metric, ": ", round(Importance, 2)))

rf_plot <- ggplot(plot_df, aes(x = reorder(Variable, Importance), y = Importance, fill = Metric)) +
  geom_col_interactive(aes(tooltip = tooltip, data_id = interaction(Variable, Metric)), 
                       position = position_dodge(width = 0.8), width = 0.7) +
  coord_flip() +
  scale_fill_manual(values = c("firebrick", "steelblue")) +
  labs(
    title = "Variable Importance - Random Forest (Rocket League)",
    x = NULL, y = "Importance", fill = "Metric"
  ) +
  theme_minimal(base_size = 14)

girafe(ggobj = rf_plot)
```

## Row 2 {height="50%"}

```{r}
rocket_summary <- rocket_data %>%
  mutate(early_result = ifelse(early_win_indicator == 1, "Team A Won Early", "Team B Won Early")) %>%
  group_by(early_result, match_win) %>%
  summarise(n = n()) %>%
  mutate(result = ifelse(match_win == 1, "Team A Wins", "Team B Wins"),
         tooltip = paste0(early_result, "\n", result, ": ", n))

rocket_bar <- ggplot(rocket_summary, aes(x = early_result, y = n, fill = result)) +
  geom_col_interactive(aes(tooltip = tooltip, data_id = interaction(early_result, result)), position = "dodge") +
  labs(title = "Match Wins by Early Outcome (RL)", x = "Early Outcome", y = "Count") +
  theme_minimal(base_size = 14) 

girafe(ggobj = rocket_bar)
```

### Column 1 width="33%"}

```{r}
predictions <- predict(classic_log_model, newdata = test_data, type = "response")
predicted_class <- ifelse(predictions >= 0.5, 1, 0)
conf_df <- data.frame(Predicted = predicted_class, Actual = test_data$match_win) %>%
  count(Predicted, Actual) %>%
  mutate(tooltip = paste0("Predicted: ", Predicted, "\nActual: ", Actual, "\nCount: ", n))

conf_plot <- ggplot(conf_df, aes(x = Actual, y = Predicted, fill = n)) +
  geom_tile_interactive(aes(tooltip = tooltip, data_id = interaction(Predicted, Actual))) +
  geom_text(aes(label = n), color = "white", size = 5) +
  labs(title = "Predicted vs Actual Outcomes - Classic Logistic (RL)",
       x = "Actual Outcome", y = "Predicted Outcome") +
  theme_minimal(base_size = 14)

girafe(ggobj = conf_plot)
```

## Row 1 {height="50%"}

### Column 1 {width="34%"}

```{r}
# Generate confusion matrix df
conf_df <- as.data.frame(conf_matrix)
colnames(conf_df) <- c("Predicted", "Actual", "Count")
conf_df <- conf_df %>%
  mutate(tooltip = paste0("Predicted: ", Predicted, "\nActual: ", Actual, "\nCount: ", Count))

conf_plot <- ggplot(conf_df, aes(x = Actual, y = Predicted, fill = Count)) +
  geom_tile_interactive(aes(tooltip = tooltip, data_id = interaction(Predicted, Actual))) +
  geom_text(aes(label = Count), color = "white", size = 5) +
  scale_fill_gradient(low = "lightblue", high = "darkblue") +
  labs(
    title = "Confusion Matrix Heatmap (Rocket League)",
    subtitle = "Classic Logistic Regression"
  ) +
  theme_minimal(base_size = 14)

girafe(ggobj = conf_plot)
```
:::
